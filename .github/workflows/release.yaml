on:
  push:
    branches: [master]


name: Check and Lint

jobs:
  check:
    name: Check
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          override: true
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features
          name: Clippy Output
  test:
    name: Test
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Generate test result and coverage report
        run: cargo test
  release:
    name: Release Packaging
    needs: [Test, Check]
    env:
      PROJECT_NAME_UNDERSCORE: lesson-1
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - run: mkdir -p target/release
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Release Build
        run: cargo build --release
      - name: 'Upload Ubuntu'
        uses: actions/upload-artifact@v2
        if: matrix.os == 'ubuntu-latest'
        with:
          name: ${{ env.PROJECT_NAME_UNDERSCORE }}
          path: target/release/${{ env.PROJECT_NAME_UNDERSCORE }}
      - name: 'Upload Windows'
        uses: actions/upload-artifact@v2
        if: matrix.os == 'windows-latest'
        with:
          name: ${{ env.PROJECT_NAME_UNDERSCORE }}.exe
          path: target/release/${{ env.PROJECT_NAME_UNDERSCORE }}.exe

